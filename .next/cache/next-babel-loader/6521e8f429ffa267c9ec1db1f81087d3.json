{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1337\\\\Documents\\\\WorkSpace\\\\ecomart\\\\dev\\\\mormadeWebSite\\\\components\\\\elements\\\\article\\\\AddArticle.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { TxtField, TxtArea } from '../../graphics/textFields';\nimport { BtnBbw } from '../../graphics/buttons';\nimport { uploadImage } from '../../../services/api/uploadImage';\nimport { AddContent } from '../../widgets/article';\nimport AddSingleImage from '../../widgets/image/AddSingleImage';\nimport AddText from '../../widgets/article/AddText';\nimport querystring from 'querystring';\nimport { postRequest } from '../../../services/api/post/postRequest';\nimport AddArticleCategory from '../../widgets/category/AddArticleCategory';\n\nconst AddArticle = props => {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    title: null,\n    description: null,\n    cover: {\n      state: \"edit\",\n      data: {\n        type: \"image\",\n        image: null\n      }\n    },\n    text: [],\n    tags: []\n  });\n\n  const getValue = (event, access) => {\n    if (access == 'title') {\n      setData(_objectSpread({}, data, {\n        title: event.target.value\n      }));\n    } else if (access == 'description') {\n      setData(_objectSpread({}, data, {\n        description: event.target.value\n      }));\n    }\n  };\n\n  const addCover = file => {\n    setData(_objectSpread({}, data, {\n      cover: file\n    }));\n  };\n\n  const removeCover = () => {\n    setData(_objectSpread({}, data, {\n      cover: null\n    }));\n  };\n\n  const appendCategory = category => {\n    let categories = data.tags;\n    categories.push(category);\n    setData(_objectSpread({}, data, {\n      tags: categories\n    }));\n  };\n\n  const removeCategory = index => {\n    let categories = data.tags;\n    categories.splice(index, 1);\n    setData(_objectSpread({}, data, {\n      tags: categories\n    }));\n  };\n\n  const appendContent = content => {\n    let contentList = data.text;\n    contentList.push(content);\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  const editContent = (index, content) => {\n    let contentList = data.text;\n    contentList[index] = content;\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  const removeContent = index => {\n    let contentList = data.text;\n    contentList.splice(index, 1);\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  const editCoverContent = (index, content) => {\n    setData(_objectSpread({}, data, {\n      cover: content\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    let coverId = -1;\n    if (data.cover.data.image != null) coverId = await uploadImage(event, data.cover.data.image, props.cookies['csrftoken']).then(res => res.data);\n    let textList = [];\n\n    for (let i = 0; i < data.text.length; i++) {\n      if (data.text[i].data.type == 'image') {\n        let response = await uploadImage(event, data.text[i].data.image, props.cookies['csrftoken']).then(res => res);\n        textList.push(querystring.stringify({\n          type: 'image',\n          image: response.data\n        }));\n      } else {\n        textList.push(querystring.stringify({\n          type: 'text',\n          text: data.text[i].data.text\n        }));\n      }\n    }\n\n    let newTags = [];\n\n    for (let i = 0; i < data.tags.length; i++) {\n      newTags.push(data.tags[i].id);\n    }\n\n    let newData = _objectSpread({}, data, {\n      cover: coverId,\n      text: querystring.stringify(textList),\n      tags: newTags\n    });\n\n    postRequest(querystring.stringify({\n      operation: \"register\",\n      data: querystring.stringify(newData)\n    }), props.cookies['csrftoken'], process.env.domain + '/api/articles/').then(res => {\n      console.log(res);\n    });\n  };\n\n  let content = __jsx(\"div\", {\n    className: \"m-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    className: \"w-full\",\n    action: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(TxtField, {\n    shadow: true,\n    label: \"Title\",\n    onChange: event => getValue(event, 'title'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), __jsx(TxtArea, {\n    label: \"Description\",\n    onChange: event => getValue(event, 'description'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    className: \"block mb-1 font-sans font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, \"Add Cover\"), __jsx(AddSingleImage, {\n    index: -1,\n    className: \"\",\n    data: data.cover,\n    close: \"false\",\n    editContent: editCoverContent,\n    removeContent: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    className: \"block mb-1 font-sans font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Add Article Content\"), __jsx(\"div\", {\n    className: \"h-auto w-full border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, data.text.map((content, index) => {\n    if (content.data.type == \"image\") {\n      return __jsx(AddSingleImage, {\n        index: index,\n        className: \"m-2\",\n        data: content,\n        close: \"true\",\n        editContent: editContent,\n        removeContent: removeContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 41\n        }\n      });\n    } else {\n      return __jsx(AddText, {\n        index: index,\n        className: \"m-2\",\n        data: content,\n        editContent: editContent,\n        removeContent: removeContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 41\n        }\n      });\n    }\n  }), __jsx(AddContent, {\n    className: \"m-2\",\n    appendContent: appendContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }))), __jsx(AddArticleCategory, {\n    categories: data.tags,\n    addCategory: appendCategory,\n    removeCategory: removeCategory,\n    csrftoken: props.cookies['csrftoken'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }), __jsx(BtnBbw, {\n    className: \"w-full h-12 mt-8 mb-4\",\n    value: \"ADD ARTICLE\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  })));\n\n  return content;\n};\n\nexport default AddArticle;","map":{"version":3,"sources":["C:/Users/1337/Documents/WorkSpace/ecomart/dev/mormadeWebSite/components/elements/article/AddArticle.js"],"names":["React","useState","useEffect","TxtField","TxtArea","BtnBbw","uploadImage","AddContent","AddSingleImage","AddText","querystring","postRequest","AddArticleCategory","AddArticle","props","data","setData","title","description","cover","state","type","image","text","tags","getValue","event","access","target","value","addCover","file","removeCover","appendCategory","category","categories","push","removeCategory","index","splice","appendContent","content","contentList","editContent","removeContent","editCoverContent","handleSubmit","preventDefault","coverId","cookies","then","res","textList","i","length","response","stringify","newTags","id","newData","operation","process","env","domain","console","log","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { TxtField, TxtArea } from '../../graphics/textFields'\r\nimport { BtnBbw } from '../../graphics/buttons'\r\nimport { uploadImage } from '../../../services/api/uploadImage'\r\nimport { AddContent } from '../../widgets/article'\r\nimport AddSingleImage from '../../widgets/image/AddSingleImage'\r\nimport AddText from '../../widgets/article/AddText'\r\nimport querystring from 'querystring'\r\nimport { postRequest } from '../../../services/api/post/postRequest'\r\nimport AddArticleCategory from '../../widgets/category/AddArticleCategory'\r\n\r\nconst AddArticle = props => {\r\n\r\n    const [data, setData] = useState({\r\n        title: null,\r\n        description: null,\r\n        cover: {\r\n            state: \"edit\",\r\n            data: {\r\n                type: \"image\",\r\n                image: null\r\n            }\r\n        },\r\n        text: [],\r\n        tags: []\r\n    })\r\n\r\n    const getValue = (event, access) => {\r\n        if (access == 'title') {\r\n            setData({ ...data, title: event.target.value })\r\n        } else if (access == 'description') {\r\n            setData({ ...data, description: event.target.value })\r\n        }\r\n    }\r\n\r\n    const addCover = (file) => {\r\n        setData({ ...data, cover: file })\r\n    }\r\n\r\n    const removeCover = () => {\r\n        setData({ ...data, cover: null })\r\n    }\r\n\r\n    const appendCategory = (category) => {\r\n        let categories = data.tags\r\n        categories.push(category)\r\n        setData({ ...data, tags: categories })\r\n    }\r\n\r\n    const removeCategory = (index) => {\r\n        let categories = data.tags\r\n        categories.splice(index, 1)\r\n        setData({ ...data, tags: categories })\r\n    }\r\n\r\n    const appendContent = (content) => {\r\n        let contentList = data.text\r\n        contentList.push(content)\r\n        setData({ ...data, text: contentList })\r\n    }\r\n\r\n    const editContent = (index, content) => {\r\n        let contentList = data.text\r\n        contentList[index] = content\r\n        setData({ ...data, text: contentList })\r\n    }\r\n\r\n    const removeContent = (index) => {\r\n        let contentList = data.text\r\n        contentList.splice(index, 1)\r\n        setData({ ...data, text: contentList })\r\n    }\r\n\r\n    const editCoverContent = (index, content) => {\r\n        setData({ ...data, cover: content })\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        let coverId = -1\r\n        if (data.cover.data.image != null)\r\n            coverId = await uploadImage(event, data.cover.data.image, props.cookies['csrftoken']).then((res) => res.data)\r\n        let textList = []\r\n        for (let i = 0; i < data.text.length; i++) {\r\n            if (data.text[i].data.type == 'image') {\r\n                let response = await uploadImage(event, data.text[i].data.image, props.cookies['csrftoken']).then((res) => res)\r\n                textList.push(querystring.stringify({\r\n                    type: 'image',\r\n                    image: response.data\r\n                }))\r\n            } else {\r\n                textList.push(querystring.stringify({\r\n                    type: 'text',\r\n                    text:  data.text[i].data.text\r\n                }))\r\n            }\r\n        }\r\n        let newTags = []\r\n        for (let i = 0; i < data.tags.length; i++) {\r\n            newTags.push(data.tags[i].id)\r\n        }\r\n        let newData = {\r\n            ...data,\r\n            cover: coverId,\r\n            text: querystring.stringify(textList),\r\n            tags: newTags\r\n        }\r\n        postRequest(querystring.stringify({\r\n            operation: \"register\",\r\n            data: querystring.stringify(newData)\r\n        }), props.cookies['csrftoken'], process.env.domain + '/api/articles/').then((res) => {\r\n            console.log(res)\r\n        })\r\n    }\r\n\r\n    let content = (\r\n        <div className=\"m-4\">\r\n            <form className=\"w-full\" action=\"\">\r\n                <TxtField shadow={true} label=\"Title\" onChange={(event) => getValue(event, 'title')} />\r\n                <TxtArea label=\"Description\" onChange={(event) => getValue(event, 'description')} />\r\n                <div className=\"pb-2\">\r\n                    <label className=\"block mb-1 font-sans font-medium\">Add Cover</label>\r\n                    <AddSingleImage index={-1} className=\"\" data={data.cover} close=\"false\" editContent={editCoverContent} removeContent={() => { }} />\r\n                </div>\r\n                <div>\r\n                    <label className=\"block mb-1 font-sans font-medium\">Add Article Content</label>\r\n                    <div className=\"h-auto w-full border\">\r\n                        {data.text.map((content, index) => {\r\n                            if (content.data.type == \"image\") {\r\n                                return (<AddSingleImage index={index} className=\"m-2\" data={content} close=\"true\" editContent={editContent} removeContent={removeContent} />)\r\n                            } else {\r\n                                return (<AddText index={index} className=\"m-2\" data={content} editContent={editContent} removeContent={removeContent} />)\r\n                            }\r\n                        })}\r\n                        <AddContent className=\"m-2\" appendContent={appendContent} />\r\n                    </div>\r\n                </div>\r\n                <AddArticleCategory\r\n                    categories={data.tags}\r\n                    addCategory={appendCategory}\r\n                    removeCategory={removeCategory}\r\n                    csrftoken={props.cookies['csrftoken']}/>\r\n                <BtnBbw className=\"w-full h-12 mt-8 mb-4\" value=\"ADD ARTICLE\" onClick={handleSubmit} />\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n    return content\r\n}\r\n\r\nexport default AddArticle"]},"metadata":{},"sourceType":"module"}