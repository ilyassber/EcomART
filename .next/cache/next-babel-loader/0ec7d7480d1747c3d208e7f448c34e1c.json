{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { TxtField, TxtArea } from '../../graphics/textFields';\nimport { BtnBbw } from '../../graphics/buttons';\nimport { uploadImage } from '../../../services/api/uploadImage';\nimport { AddContent } from '../../widgets/article';\nimport AddSingleImage from '../../widgets/image/AddSingleImage';\nimport AddText from '../../widgets/article/AddText';\nimport querystring from 'querystring';\nimport { postRequest } from '../../../services/api/post/postRequest';\n\nvar AddArticle = function AddArticle(props) {\n  var _useState = useState({\n    title: null,\n    description: null,\n    cover: {\n      state: \"edit\",\n      data: {\n        type: \"image\",\n        image: null\n      }\n    },\n    text: []\n  }),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var getValue = function getValue(event, access) {\n    if (access == 'title') {\n      setData(_objectSpread({}, data, {\n        title: event.target.value\n      }));\n    } else if (access == 'description') {\n      setData(_objectSpread({}, data, {\n        description: event.target.value\n      }));\n    }\n  };\n\n  var addCover = function addCover(file) {\n    setData(_objectSpread({}, data, {\n      cover: file\n    }));\n  };\n\n  var removeCover = function removeCover() {\n    setData(_objectSpread({}, data, {\n      cover: null\n    }));\n  };\n\n  var appendContent = function appendContent(content) {\n    var contentList = data.text;\n    contentList.push(content);\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  var editContent = function editContent(index, content) {\n    var contentList = data.text;\n    contentList[index] = content;\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  var removeContent = function removeContent(index) {\n    var contentList = data.text;\n    contentList.splice(index, 1);\n    setData(_objectSpread({}, data, {\n      text: contentList\n    }));\n  };\n\n  var editCoverContent = function editCoverContent(index, content) {\n    setData(_objectSpread({}, data, {\n      cover: content\n    }));\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    var coverId, textList, i, response, newData;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            coverId = -1;\n\n            if (!(data.cover.data.image != null)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(uploadImage(event, data.cover.data.image, props.cookies['csrftoken']).then(function (res) {\n              return res.data;\n            }));\n\n          case 5:\n            coverId = _context.sent;\n\n          case 6:\n            textList = [];\n            i = 0;\n\n          case 8:\n            if (!(i < data.text.length)) {\n              _context.next = 20;\n              break;\n            }\n\n            if (!(data.text[i].data.type == 'image')) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(uploadImage(event, data.text[i].data.image, props.cookies['csrftoken']).then(function (res) {\n              return res;\n            }));\n\n          case 12:\n            response = _context.sent;\n            textList.push(querystring.stringify({\n              type: 'image',\n              image: response.data\n            }));\n            _context.next = 17;\n            break;\n\n          case 16:\n            textList.push(querystring.stringify({\n              type: 'text',\n              text: data.text[i].data.text\n            }));\n\n          case 17:\n            i++;\n            _context.next = 8;\n            break;\n\n          case 20:\n            newData = _objectSpread({}, data, {\n              cover: coverId,\n              text: querystring.stringify(textList)\n            });\n            postRequest(querystring.stringify({\n              operation: \"register\",\n              data: querystring.stringify(newData)\n            }), props.cookies['csrftoken'], process.env.domain + '/api/articles/').then(function (res) {\n              console.log(res);\n            });\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var content = __jsx(\"div\", {\n    className: \"m-4\"\n  }, __jsx(\"form\", {\n    className: \"w-full\",\n    action: \"\"\n  }, __jsx(TxtField, {\n    label: \"Title\",\n    onChange: function onChange(event) {\n      return getValue(event, 'title');\n    }\n  }), __jsx(TxtArea, {\n    label: \"Description\",\n    onChange: function onChange(event) {\n      return getValue(event, 'description');\n    }\n  }), __jsx(\"div\", {\n    className: \"pb-2\"\n  }, __jsx(\"label\", {\n    className: \"block mb-1 font-sans font-medium\"\n  }, \"Add Cover\"), __jsx(AddSingleImage, {\n    index: -1,\n    className: \"\",\n    data: data.cover,\n    close: \"false\",\n    editContent: editCoverContent,\n    removeContent: function removeContent() {}\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"block mb-1 font-sans font-medium\"\n  }, \"Add Article Content\"), __jsx(\"div\", {\n    className: \"h-auto w-full border\"\n  }, data.text.map(function (content, index) {\n    if (content.data.type == \"image\") {\n      return __jsx(AddSingleImage, {\n        index: index,\n        className: \"m-2\",\n        data: content,\n        close: \"true\",\n        editContent: editContent,\n        removeContent: removeContent\n      });\n    } else {\n      return __jsx(AddText, {\n        index: index,\n        className: \"m-2\",\n        data: content,\n        editContent: editContent,\n        removeContent: removeContent\n      });\n    }\n  }), __jsx(AddContent, {\n    className: \"m-2\",\n    appendContent: appendContent\n  }))), __jsx(BtnBbw, {\n    className: \"w-full h-12 mt-8 mb-4\",\n    value: \"ADD ARTICLE\",\n    onClick: handleSubmit\n  })));\n\n  return content;\n};\n\nexport default AddArticle;","map":null,"metadata":{},"sourceType":"module"}