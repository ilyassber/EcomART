{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { parseCookies } from '../../lib/parseCookies';\nimport { Navbar, SideBar, WelcomeBar } from '../../components/elements/bar';\nimport { ProductGrid } from '../../components/widgets/product';\nimport ProductGridList from '../../components/elements/list/ProductGridList';\nimport { AddProduct } from '../../components/elements/product';\nimport AddArticle from '../../components/elements/article/AddArticle';\nimport ArticleList from '../../components/elements/list/ArticleList';\nimport { getRequest } from '../../services/api/get/getRequest';\nimport { postRequest } from '../../services/api/post/postRequest';\nimport ArticleBanner from '../../components/widgets/article/ArticleBanner';\nimport querystring from 'querystring';\n\nconst UserPage = props => {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    products: null,\n    articles: null\n  });\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: clikced,\n    1: setClicked\n  } = useState(0);\n  useEffect(() => {\n    let user = localStorage.getItem('_user');\n    console.log(user);\n    setIsLoading(true);\n\n    if (props.cookies.utoken != null) {\n      getRequest(process.env.domain + '/api/products/').then(res => {\n        let products = res; //setData({...data , products: JSON.stringify(res)});\n        //setIsLoading(false);\n\n        postRequest(querystring.stringify({\n          operation: \"all\"\n        }), props.cookies['csrftoken'], process.env.domain + '/api/articles/').then(res => {\n          setData({\n            products: JSON.stringify(products),\n            articles: JSON.stringify(res)\n          });\n          setIsLoading(false);\n        });\n      });\n    } else {\n      window.location = '/maker/auth';\n    }\n  }, []);\n\n  let content = __jsx(\"p\", null, \"Loading characters...\");\n\n  if (!isLoading) {\n    const productsList = data.products ? JSON.parse(data.products).map(function (product) {\n      return __jsx(ProductGrid, {\n        className: \"h-auto w-auto m-2\",\n        key: product.id,\n        data: product,\n        owner: \"ilyass\"\n      });\n    }) : null;\n    const articlesList = data.articles ? JSON.parse(data.articles).map(function (article) {\n      localStorage.setItem(article.url, JSON.stringify(article));\n      return __jsx(ArticleBanner, {\n        className: \"h-auto w-full max-w-screen-md m-4\",\n        key: article.id,\n        data: article\n      });\n    }) : null;\n    const sideBarData = [{\n      id: 0,\n      value: 'Products'\n    }, {\n      id: 1,\n      value: 'Stories'\n    }, {\n      id: 2,\n      value: 'Add Product'\n    }, {\n      id: 3,\n      value: 'Add Story'\n    }];\n\n    let comp1 = __jsx(ProductGridList, {\n      className: \"p-2\",\n      data: productsList\n    });\n\n    let comp2 = __jsx(ArticleList, {\n      className: \"p-2\",\n      data: articlesList\n    });\n\n    let comp3 = __jsx(AddProduct, {\n      className: \"p-2\",\n      cookies: props.cookies\n    });\n\n    let comp4 = __jsx(AddArticle, {\n      className: \"p-2\",\n      cookies: props.cookies\n    });\n\n    const componentsList = [comp1, comp2, comp3, comp4];\n    content = __jsx(\"div\", {\n      className: \"w-full\"\n    }, __jsx(Navbar, {\n      cookies: props.cookies,\n      className: \"w-full\"\n    }), __jsx(WelcomeBar, {\n      className: \"pt-12\"\n    }), __jsx(\"div\", {\n      className: \"w-full flex pt-10\"\n    }, __jsx(\"div\", {\n      className: \"w-64 h-full\"\n    }, __jsx(SideBar, {\n      className: \"w-full h-full\",\n      clicked: clikced,\n      data: sideBarData,\n      onClick: x => setClicked(x)\n    })), __jsx(\"div\", {\n      className: \"w-full h-full\"\n    }, componentsList[clikced])));\n  } else if (!isLoading && (!data || data.length === 0)) {\n    content = __jsx(\"p\", null, \"Could not fetch any data.\");\n  }\n\n  return content;\n};\n\nUserPage.getInitialProps = async ({\n  req\n}) => {\n  const cookies = parseCookies(req);\n  return {\n    cookies: cookies,\n    data: req.data\n  };\n};\n\nexport default UserPage;","map":null,"metadata":{},"sourceType":"module"}