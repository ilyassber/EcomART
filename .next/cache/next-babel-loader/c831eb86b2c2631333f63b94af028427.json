{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Soguma\\\\MorMade_project\\\\webweb\\\\components\\\\graphics\\\\textFields\\\\TxtArea.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef } from 'react';\n\nconst TxtArea = props => {\n  const inputRef = useRef();\n  let align = 'left';\n  let color = 'gray-900';\n  let borderColor = 'gray-300';\n  let textColor = 'gray-700';\n  let focusColor = 'black';\n  let bgColor = 'transparent';\n  let disableColor = 'gray-300';\n  let disabled = false;\n  let placeholder = '';\n  let placeholderColor = 'gray-500';\n  let height = 12;\n  let shadow = 'border border-';\n\n  if (props.align != null) {\n    align = props.align;\n  }\n\n  if (props.color != null) {\n    color = props.color;\n  }\n\n  if (props.height != null) {\n    height = props.height;\n  }\n\n  if (props.borderColor != null) {\n    borderColor = props.borderColor;\n  }\n\n  if (props.textColor != null) {\n    textColor = props.textColor;\n  }\n\n  if (props.focusColor != null) {\n    focusColor = props.focusColor;\n  }\n\n  if (props.bgColor != null) {\n    bgColor = props.bgColor;\n  }\n\n  if (props.disableColor != null) {\n    disableColor = props.disableColor;\n  }\n\n  if (props.placeholderColor != null) {\n    placeholderColor = props.placeholderColor;\n  }\n\n  if (props.error == true) {\n    borderColor = 'red-600';\n    color = 'red-600';\n  }\n\n  if (props.disabled != null) {\n    disabled = props.disabled;\n  }\n\n  if (props.disabled == true) {\n    bgColor = disableColor;\n  }\n\n  if (props.reset == true) {\n    if (props.color != null) {\n      color = props.color;\n    } else {\n      color = 'white';\n    }\n\n    if (props.borderColor != null) {\n      borderColor = props.borderColor;\n    } else {\n      borderColor = 'gray-300';\n    }\n\n    if (props.textColor != null) {\n      textColor = props.textColor;\n    } else {\n      textColor = 'gray-700';\n    }\n\n    inputRef.current.value = '';\n  }\n\n  if (props.placeholder != null) {\n    placeholder = props.placeholder;\n  }\n\n  if (props.shadow == true) {\n    shadow = 'shadow';\n    borderColor = '';\n  }\n\n  let content = __jsx(\"div\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, props.label != null ? __jsx(\"label\", {\n    className: 'w-full block mb-1 font-sans font-medium' + ' text-' + color + ' text-' + align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }\n  }, props.label) : null, __jsx(\"textarea\", {\n    ref: inputRef,\n    rows: \"4\",\n    cols: \"50\",\n    disabled: disabled,\n    placeholder: placeholder,\n    className: 'appearance-none ' + shadow + borderColor + ' w-full h-' + height + ' py-2 px-3 font-sans font-medium text-' + textColor + ' leading-tight bg-' + bgColor + ' placeholder-' + placeholderColor + ' focus:outline-none focus:border-' + focusColor,\n    type: \"text\",\n    onChange: props.onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }));\n\n  return content;\n};\n\nexport default TxtArea;","map":{"version":3,"sources":["C:/Users/Soguma/MorMade_project/webweb/components/graphics/textFields/TxtArea.js"],"names":["useRef","TxtArea","props","inputRef","align","color","borderColor","textColor","focusColor","bgColor","disableColor","disabled","placeholder","placeholderColor","height","shadow","error","reset","current","value","content","className","label","onChange"],"mappings":"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","sourcesContent":["import { useRef } from 'react'\r\n\r\nconst TxtArea = props => {\r\n\r\n    const inputRef = useRef()\r\n\r\n    let align = 'left'\r\n    let color = 'gray-900'\r\n    let borderColor = 'gray-300'\r\n    let textColor = 'gray-700'\r\n    let focusColor = 'black'\r\n    let bgColor = 'transparent'\r\n    let disableColor = 'gray-300'\r\n    let disabled = false\r\n    let placeholder = ''\r\n    let placeholderColor = 'gray-500'\r\n    let height = 12\r\n    let shadow = 'border border-'\r\n\r\n    if (props.align != null) {\r\n        align = props.align\r\n    }\r\n\r\n    if (props.color != null) {\r\n        color = props.color\r\n    }\r\n\r\n    if (props.height != null) {\r\n        height = props.height\r\n    }\r\n\r\n    if (props.borderColor != null) {\r\n        borderColor = props.borderColor\r\n    }\r\n\r\n    if (props.textColor != null) {\r\n        textColor = props.textColor\r\n    }\r\n\r\n    if (props.focusColor != null) {\r\n        focusColor = props.focusColor\r\n    }\r\n\r\n    if (props.bgColor != null) {\r\n        bgColor = props.bgColor\r\n    }\r\n\r\n    if (props.disableColor != null) {\r\n        disableColor = props.disableColor\r\n    }\r\n\r\n    if (props.placeholderColor != null) {\r\n        placeholderColor = props.placeholderColor\r\n    }\r\n\r\n    if (props.error == true) {\r\n        borderColor = 'red-600'\r\n        color = 'red-600'\r\n    }\r\n\r\n    if (props.disabled != null) {\r\n        disabled = props.disabled\r\n    }\r\n\r\n    if (props.disabled == true) {\r\n        bgColor = disableColor\r\n    }\r\n\r\n    if (props.reset == true) {\r\n        if (props.color != null) {\r\n            color = props.color\r\n        } else {\r\n            color = 'white'\r\n        }\r\n        if (props.borderColor != null) {\r\n            borderColor = props.borderColor\r\n        } else {\r\n            borderColor = 'gray-300'\r\n        }\r\n        if (props.textColor != null) {\r\n            textColor = props.textColor\r\n        } else {\r\n            textColor = 'gray-700'\r\n        }\r\n        inputRef.current.value = ''\r\n    }\r\n\r\n    if (props.placeholder != null) {\r\n        placeholder = props.placeholder\r\n    }\r\n\r\n    if (props.shadow == true) {\r\n        shadow = 'shadow'\r\n        borderColor = ''\r\n    }\r\n\r\n    let content = (\r\n        <div className={props.className}>\r\n            {(props.label != null)\r\n            ? (<label className={'w-full block mb-1 font-sans font-medium' + ' text-' + color + ' text-' + align}>{props.label}</label>)\r\n            : null}\r\n            <textarea\r\n                ref={inputRef}\r\n                rows=\"4\" cols=\"50\"\r\n                disabled={disabled}\r\n                placeholder={placeholder}\r\n                className={'appearance-none ' + shadow + borderColor + ' w-full h-' + height + ' py-2 px-3 font-sans font-medium text-' + textColor + ' leading-tight bg-' + bgColor + ' placeholder-' + placeholderColor + ' focus:outline-none focus:border-' + focusColor}\r\n                type=\"text\"\r\n                onChange={props.onChange}\r\n            />\r\n        </div>\r\n    )\r\n\r\n    return content\r\n}\r\n\r\nexport default TxtArea"]},"metadata":{},"sourceType":"module"}