{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { TxtField, TxtArea, IntField } from '../../graphics/textFields';\nimport { BtnBbw } from '../../graphics/buttons';\nimport AddImageGrid from '../../widgets/image/AddImageGrid';\nimport { uploadImage } from '../../../services/api/uploadImage';\nimport { addProduct } from '../../../services/api/addProduct';\nimport { AddProductCategory } from '../../widgets/category';\n\nvar AddProduct = function AddProduct(props) {\n  var data = {};\n  data['pics_list'] = [];\n  data['tags'] = [];\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState([]),\n      categories = _useState2[0],\n      setCategories = _useState2[1];\n\n  var getValue = function getValue(event, access) {\n    if (access == 'name') {\n      data['name'] = event.target.value;\n    } else if (access == 'description') {\n      data['description'] = event.target.value;\n    } else if (access == 'price') {\n      data['price'] = event.target.value;\n    } else if (access == 'quantity') {\n      data['quantity'] = event.target.value;\n    }\n  };\n\n  var appendFile = function appendFile(newFiles) {\n    newFiles.forEach(function (f) {\n      return files.push(f);\n    }, _this);\n  };\n\n  var removeFile = function removeFile(index) {\n    files.splice(index, 1);\n  };\n\n  var appendCategory = function appendCategory(category) {\n    categories.splice(category.lvl, 0, category);\n  };\n\n  var removeCategory = function removeCategory(index) {\n    categories.splice(index, categories.length - index);\n  };\n\n  var handleSubmit = function handleSubmit(event) {\n    var i, response, _i;\n\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            i = 0;\n\n          case 2:\n            if (!(i < files.length)) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(uploadImage(event, files[0], props.cookies['csrftoken']).then(function (res) {\n              return res;\n            }));\n\n          case 5:\n            response = _context.sent;\n            data['pics_list'].push(response.data);\n\n          case 7:\n            i++;\n            _context.next = 2;\n            break;\n\n          case 10:\n            for (_i = 0; _i < categories.length; _i++) {\n              data['tags'].push(categories[_i].id);\n            }\n\n            console.log(data);\n            addProduct(data, props.cookies['csrftoken']).then(function (res) {\n              console.log(res);\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var content = __jsx(\"div\", {\n    className: \"m-4\"\n  }, __jsx(\"form\", {\n    className: \"\",\n    action: \"\"\n  }, __jsx(TxtField, {\n    label: \"Product Name\",\n    onChange: function onChange(event) {\n      return getValue(event, 'name');\n    }\n  }), __jsx(TxtArea, {\n    label: \"Product Description\",\n    onChange: function onChange(event) {\n      return getValue(event, 'description');\n    }\n  }), __jsx(TxtField, {\n    label: \"Product Region\",\n    onChange: function onChange(event) {\n      return getValue(event, 'region');\n    }\n  }), __jsx(IntField, {\n    label: \"Price\",\n    onChange: function onChange(event) {\n      return getValue(event, 'price');\n    }\n  }), __jsx(IntField, {\n    label: \"Quantity\",\n    onChange: function onChange(event) {\n      return getValue(event, 'quantity');\n    }\n  }), __jsx(AddProductCategory, {\n    categories: categories,\n    addCategory: appendCategory,\n    removeCategory: removeCategory,\n    csrftoken: props.cookies['csrftoken']\n  }), __jsx(AddImageGrid, {\n    files: files,\n    addImage: appendFile,\n    removeImage: removeFile\n  }), __jsx(BtnBbw, {\n    className: \"w-full h-12 mt-8 mb-4\",\n    value: \"ADD PRODUCT\",\n    onClick: handleSubmit\n  })));\n\n  return content;\n};\n\nexport default AddProduct;","map":null,"metadata":{},"sourceType":"module"}